plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.hacom'
version = '0.0.1-SNAPSHOT'
description = 'Backend Telco Order Processor'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    springGrpcVersion = "0.11.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.grpc:spring-grpc-dependencies:${springGrpcVersion}"
    }
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'

    // Akka Classic
    implementation 'com.typesafe.akka:akka-actor_2.13:2.6.20'

    // gRPC
    implementation 'io.grpc:grpc-netty-shaded:1.60.0'
    implementation 'io.grpc:grpc-protobuf:1.60.0'
    implementation 'io.grpc:grpc-stub:1.60.0'
    implementation 'io.grpc:grpc-services:1.60.0'
    implementation 'org.springframework.grpc:spring-grpc-spring-boot-starter'

    // SMPP desde Maven Central
    implementation 'com.cloudhopper:ch-smpp:5.0.9'

    // Protobuf
    implementation 'com.google.protobuf:protobuf-java:3.24.4'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.grpc:spring-grpc-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.24.4'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.60.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {
                    option '@generated=omit'
                }
            }
        }
    }
    
    // Configurar directorios de origen para proto
    sourceSets {
        main {
            proto {
                srcDir 'src/main/proto'
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
